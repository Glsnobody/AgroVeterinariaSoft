@attribute [Authorize]

@page "/RVenta"
@page "/RVenta/{VentaId:int}"
@inject IToastService toastService


@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>



</AuthorizeView>


@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <div class="container">

        <h3 class="display-3 text-center">Registro de Ventas</h3>

        <div>
            <EditForm Model="Venta" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label>Id</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="Venta.VentaId" class="form-control" />
                        <div class="input-group-append">
                            <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>
                        </div>
                    </div>

                </div>

                <div class="form-group">
                    <label>Fecha</label>
                    <InputDate @bind-Value="Venta.Fecha" class="form-control" />
                </div>

                <div class="form-row">
                    <div class="col form-group">
                        <label>ClienteId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="Venta.ClienteId" class="form-control" @onchange="BuscarCliente" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary" @onclick="BuscarCliente">Buscar</button>
                            </div>
                        </div>
                    </div>

                    <div class="col form-group">
                        <label>Cliente</label>
                        <InputText @bind-Value="Cliente.Nombres" class="form-control" />
                    </div>
                </div>



                <div class="form-row">
                    <div class="form-group col">
                        <label>ProductoId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="Producto.ProductoId" class="form-control" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-outline-primary" @onclick="BuscarProducto">Buscar</button>
                            </div>
                        </div>

                    </div>

                    <div class="form-group col">
                        <label>Producto</label>
                        <InputText @bind-Value="Producto.Descripcion" class="form-control" />
                    </div>

                    <div class="form-group col">
                        <label>Existencia</label>
                        <InputNumber @bind-Value="Producto.Cantidad" class="form-control" ReadOnly="true" />
                    </div>

                    <div class="form-group col">
                        <label>Cantidad</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="CantidadProducto" class="form-control" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-outline-primary" @onclick="AgregarProducto">Agregar</button>
                            </div>
                        </div>

                    </div>
                </div>


                <div>
                    <table class="table">
                        <thead class="thead-dark">
                            <tr>
                                <th scope="row">Id</th>
                                <th scope="row">Producto</th>
                                <th scope="row">Precio</th>
                                <th scope="row">Cantidad</th>
                                <th></th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var obj in Venta.Productos)
                            {
                                <tr>
                                    <td>@obj.ProductoId</td>
                                    <td>@obj.Descripcion</td>
                                    <td>@obj.Precio</td>
                                    <td>@obj.Cantidad</td>
                                    <td><button type="button" class="btn btn-sm " @onclick="(()=> RemoverProducto(obj))">Eliminar</button></td>
                                </tr>
                            }

                        </tbody>

                    </table>
                </div>
                <div class="form-row">
                    <div class="form-group col">
                        <label>Observacion</label>
                        <InputTextArea @bind-Value="Venta.Observacion" class="form-control" />
                    </div>

                    <div class="col form-row">
                        <div class="col form-group">
                            <label>Itbis</label>
                            <InputNumber @bind-Value="Venta.Itbis" class="form-control" ReadOnly="true" />
                        </div>
                        <div class="col form-group">
                            <label>Total</label>
                            <InputNumber @bind-Value="Venta.Total" class="form-control" ReadOnly="true" />
                        </div>
                    </div>


                </div>


                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="Limpiar">Limpiar</button>
                    <button type="submit" class="btn btn-success">Guardar</button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </EditForm>
        </div>

    </div>
}


@code {

    [Parameter]
    public int VentaId { get; set; }

    public Ventas Venta { get; set; }
    public Clientes Cliente { get; set; }
    public Productos Producto { get; set; }

    public int CantidadProducto { get; set; }
    public string TipoVentaSeleccionada { get; set; }


    public bool NivelUsuario;
    protected override void OnInitialized()
    {
        NivelUsuario = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Bajo");
        Limpiar();
    }

    protected override void OnParametersSet()
    {
        if (VentaId > 0)
        {
            Venta.VentaId = VentaId;
            Buscar();
        }
    }

   

    private void Guardar()
    {
        try
        {
            if (!ClientesController.Existe(Venta.ClienteId))
            {
                toastService.ShowWarning("El cliente no existe");
                return;
            }

            if (Venta.Productos.Count <= 0)
            {
                toastService.ShowWarning("Debe agregar productos");
                return;
            }
            Venta.NombreCliente = Cliente.Nombres;
            if (VentasController.Guardar(Venta))
            {
                Venta = new Ventas();
                toastService.ShowSuccess("Guardado correctamente");
            }
            else
            {
                toastService.ShowInfo("No se pudo guardar");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void BuscarProducto()
    {
        try
        {
            Productos temp = ProductosController.Buscar(Producto.ProductoId);
            if (temp != null)
            {
                Producto = temp;

            }
            else
            {
                toastService.ShowInfo("No se pudo encontrar el producto");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void AgregarProducto()
    {
        if (!ValidarAgregarProducto())
        {
            return;
        }

        Venta.Productos.Add(new VentasDetalle()
        {
            ProductoId = Producto.ProductoId,
            Precio = Producto.Precio,
            Cantidad = CantidadProducto,
            Descripcion = Producto.Descripcion

        });

        CalcularTotal();

        Producto = new Productos();
    }

    private bool ValidarAgregarProducto()
    {
        bool paso = true;
        if (string.IsNullOrWhiteSpace(Producto.Descripcion))
        {
            toastService.ShowInfo("Se debe buscar un producto");
            paso = false;
        }

        if (CantidadProducto <= 0)
        {
            toastService.ShowInfo("La cantidad del producto debe ser mayot a 0");
            paso = false;
        }

        if (CantidadProducto > Producto.Cantidad || CantidadProducto < 0)
        {
            toastService.ShowInfo("La cantidad del producto no es suficiente");
            paso = false;
        }

        if (Venta.Productos.Any(A => A.ProductoId == Producto.ProductoId))
        {
            toastService.ShowInfo("No se puede agregar el mismo producto otra vez");
            paso = false;
        }

        return paso;
    }

    private void RemoverProducto(VentasDetalle entity)
    {
        Venta.Productos.Remove(entity);
        CalcularTotal();

    }

    private void Buscar()
    {
        try
        {
            Ventas temp = VentasController.Buscar(Venta.VentaId);

            if (temp != null)
            {
                Venta = temp;
                BuscarCliente();
            }
            else
            {
                toastService.ShowInfo("No se pudo encontrar");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void Limpiar()
    {
        Venta = new Ventas();
        Cliente = new Clientes();
        Producto = new Productos();

        CalcularTotal();

        CantidadProducto = 0;

    }

    private void BuscarCliente()
    {
        try
        {
            Clientes temp = ClientesController.Buscar(Venta.ClienteId);

            if (temp != null)
            {
                Cliente = temp;

            }
            else
            {
                toastService.ShowInfo("No se encontro el cliente");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void CalcularTotal()
    {

        Venta.Total = Venta.Productos.Sum(A => A.Precio * A.Cantidad);
        Venta.Itbis = Venta.Total * Convert.ToDecimal(0.18);
        Venta.Total += Venta.Itbis;
    }

    private void Eliminar()
    {
        try
        {


            if (VentasController.Existe(Venta.VentaId))
            {
                if (VentasController.Eliminar(Venta.VentaId))
                {
                    Limpiar();
                    toastService.ShowSuccess("Elliminado Correctamente");
                }
            }
            else
            {
                toastService.ShowInfo("No se pudo encontrar");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

}
