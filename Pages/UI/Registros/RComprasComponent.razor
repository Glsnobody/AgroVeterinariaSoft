@page "/RCompras"
@page "/RCompras/{CompraId:int}"
@inject IToastService toastService

@using AgroVeterinariaSoft.Data;
@using AgroVeterinariaSoft.Models;
@using AgroVeterinariaSoft.Controllers;


@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>

    <Authorized>
        @if (NivelUsuario)
        {
            <p class="display-3 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
        }
    </Authorized>

</AuthorizeView>


@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
 && !NivelUsuario)
{
    <div class="container">

        <h3 class="display-3 text-center">Registro de Compras</h3>

        <EditForm Model="Compra" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>Id</label>
                <div class="input-group">
                    <InputNumber @bind-Value="Compra.CompraId" class="form-control" />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>
                    </div>
                </div>

            </div>

            <div class="form-row">
                <div class="col form-group">
                    <label>SuplidorId</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="Compra.SuplidorId" class="form-control" />
                        <div class="input-group-append">
                            <button type="button" class="btn btn-primary" @onclick="BuscarSuplidor">Buscar</button>
                        </div>
                    </div>
                </div>

                <div class="col form-group">
                    <label>Suplidor</label>
                    <InputText @bind-Value="Suplidor.Nombre" class="form-control" />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col">
                    <label>Fecha</label>
                    <InputDate @bind-Value="Compra.Fecha" class="form-control" />
                </div>

            </div>

            <div class="form-row">
                <div class="form-group col">
                    <label>ProductoId</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="Producto.ProductoId" class="form-control" />
                        <div class="input-group-append">
                            <button type="button" class="btn btn-outline-primary" @onclick="BuscarProducto">Buscar</button>
                        </div>
                    </div>

                </div>

                <div class="form-group col">
                    <label>Producto</label>
                    <InputText @bind-Value="Producto.Descripcion" class="form-control" />
                </div>

                <div class="form-group col">
                    <label>Cantidad</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="CantidadProducto" class="form-control" />
                        <div class="input-group-append">
                            <button type="button" class="btn btn-outline-primary" @onclick="AgregarProducto">Agregar</button>
                        </div>
                    </div>

                </div>
            </div>


            <div>
                <table class="table">
                    <thead class="thead-dark">
                        <tr>
                            <th scope="row">Id</th>
                            <th scope="row">Producto</th>
                            <th scope="row">Precio</th>
                            <th scope="row">Cantidad</th>
                            <th scope="row">Importe</th>
                            <th></th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var obj in Compra.ListaProductos)
                        {
                            <tr>
                                <td>@obj.ProductoId</td>
                                <td>@obj.Descripcion</td>
                                <td>@obj.Precio</td>
                                <td>@obj.Cantidad</td>
                                <td>@obj.Importe</td>
                                <td><button type="button" class="btn btn-sm btn-danger " @onclick="(()=> Remover(obj))">Eliminar</button></td>
                            </tr>
                        }

                    </tbody>

                </table>
            </div>
            <div class="form-group">
                <label for="TotalNumber">Total:  </label>
                <InputNumber id="TotalNumber" @bind-Value="Compra.Total" class="form-control" />

            </div>

            <div class="form-group">
                <button type="button" class="btn btn-primary" @onclick="Nuevo">Limpiar</button>
                <button type="submit" class="btn btn-success">Guardar</button>
                <button type="button" class="btn btn-danger">Eliminar</button>
            </div>
        </EditForm>
    </div>


}






@code {

    Compras Compra = new Compras();
    [Parameter]
    public int CompraId { get; set; }

    Suplidores Suplidor = new Suplidores();
    Productos Producto = new Productos();

    public int CantidadProducto { get; set; }
     public bool NivelUsuario;
    protected override void OnParametersSet()
    {
        if (CompraId > 0)
        {
            Compra.CompraId = CompraId;
            Buscar();
        }
    }

        protected override void OnInitialized()
        {
            NivelUsuario = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Bajo");
        }

        public void Guardar()
    {
        try
        {
            if (SuplidoresController.Buscar(Compra.SuplidorId) == null)
            {
                toastService.ShowWarning("El suplidor no existe");
                return;
            }

            if (Compra.ListaProductos.Count <= 0)
            {
                toastService.ShowWarning("Debe agregar productos");
                return;
            }
            CalcularTotal();
            if (ComprasController.Guardar(Compra))
            {
                Compra = new Compras();
                toastService.ShowSuccess("Guardado correctamente");
            }
            else
            {
                toastService.ShowInfo("No se pudo guardar");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    public void Remover(DetalleProductos dr)
    {
        Compra.ListaProductos.Remove(dr);
        CalcularTotal();
    }

    public void BuscarSuplidor()
    {
        try
        {
            Suplidores temp = SuplidoresController.Buscar(Compra.SuplidorId);
            if (temp == null)
            {
                toastService.ShowWarning("Debe agregar un Suplidor existente");
                return;
            }

            if (temp != null)
            {
                Suplidor = temp;
            }
            else
            {
                toastService.ShowInfo("No se encontro el suplidor");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void AgregarProducto()
    {
        if (Producto.ProductoId == 0)
        {
            toastService.ShowWarning("Debe agregar un producto");
            return;
        }
        if (Producto == null)
        {
            toastService.ShowWarning("Debe agregar un producto existente");
            return;
        }
        if (CantidadProducto <= 0)
        {
            toastService.ShowWarning("Agregue una cantidad valida");
            return;
        }
        if (Suplidor.SuplidorId == 0)
        {
            toastService.ShowWarning("Debe agregar un Suplidor");
            return;
        }
        if (Suplidor == null)
        {
            toastService.ShowWarning("Debe agregar un Suplidor existente");
            return;
        }
        Compra.ListaProductos.Add(new DetalleProductos(
            iD: 0,
            compraId: Compra.CompraId,
            productoId: Producto.ProductoId,
            precio: Producto.Precio,
            cantidad: CantidadProducto,
            descripcion: Producto.Descripcion,
            importe: Producto.Precio * CantidadProducto

            ));

        CalcularTotal();

        Producto = new Productos();
    }

    public void BuscarProducto()
    {
        try
        {
            Productos temp = ProductosController.Buscar(Producto.ProductoId);

            if (temp != null)
            {
                Producto = temp;
            }
            else
            {
                toastService.ShowInfo("No se encontro el producto");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    public void Nuevo()
    {
        Compra = new Compras();
        Suplidor = new Suplidores();
        Producto = new Productos();

        CalcularTotal();

        CantidadProducto = 0;

    }

    private void CalcularTotal()
    {
        Compra.Total = Compra.ListaProductos.Sum(p => p.Importe);
    }

    public void Buscar()
    {
        try
        {
            Compras temp = ComprasController.Buscar(Compra.CompraId);

            if (temp != null)
            {
                Compra = temp;
                BuscarSuplidor();
                CalcularTotal();
            }
            else
            {
                toastService.ShowInfo("No se pudo encontrar");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    public void Eliminar()
    {

    }
}
