@page "/RProductos"
@page "/RProductos/{ProductoId:int}"
@inject IToastService toastService

@using AgroVeterinariaSoft.Data;
@using AgroVeterinariaSoft.Models;
@using AgroVeterinariaSoft.Controllers;



@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>

    <Authorized>
        @if (NivelUsuario)
        {
            <p class="display-3 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
        }
    </Authorized>

</AuthorizeView>


@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
 && !NivelUsuario)
{

    <div class="container">

        <h3 class="display-3 text-center">Registro de Productos</h3>

        <EditForm Model="Producto" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="ProductoIdNumber">Producto ID: </label>
                <div class="input-group">
                    <InputNumber id="ProductoIdNumber" @bind-Value="Producto.ProductoId" class="form-control" />
                    <button type="button" class="btn btn-primary" @onclick="Buscar"> Buscar</button>
                </div>
            </div>

            <div class="form-group">
                <label for="FechaDate">Fecha: </label>
                <InputDate id="FechaDate" @bind-Value="Producto.Fecha" class="form-control"> Fecha: </InputDate>
            </div>

            <div class="form-group">
                <label for="DescripcionText">Descripcion: </label>
                <InputText id="DescripcionText" @bind-Value="Producto.Descripcion" class="form-control"></InputText>
            </div>

            <div class="form-row">
                <div class="form-group col">
                    <label for="CantidadNumber">Cantidad: </label>
                    <InputNumber id="CantidadNumber" @bind-Value="Producto.Cantidad" class="form-control"></InputNumber>
                </div>

                <div class="form-group col">
                    <label for="MinimoNumber">Minimo: </label>
                    <InputNumber id="MinimoNumber" @bind-Value="Producto.Minimo" class="form-control"></InputNumber>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col">
                    <label for="UnidadText">Unidad: </label>

                    <InputSelect @bind-Value="unidadSeleccionada" @onclick="agregarUnidad" class="form-control">

                        @foreach (var unidad in ListaUnidades)
                            {
                                 <option value="@unidad.UnidadId ">@unidad.Descripcion</option>
                            }


                    </InputSelect>
                    <ValidationMessage For="(()=> Producto.Unidad) "/>
                   
                </div>

                <div class="form-group col">
                    <label for="CostoNumber">Costo: </label>
                    <InputNumber id="CostoNumber" @bind-Value="Producto.Costo" @onfocus="Calcular" @onfocusin="Calcular" @onfocusout="Calcular" @onchange="Calcular" class="form-control"></InputNumber>

                </div>

            </div>

            <div class="form-row">

                <div class="form-group col">
                    <label for="GananciaNumber">Ganancia: </label>
                    <InputNumber id="GananciaNumber" @bind-Value="Producto.Ganancia" @onfocus="Calcular" @onfocusin="Calcular" @onfocusout="Calcular" @onchange="Calcular" class="form-control"></InputNumber>
                </div>

                <div class="form-group col">
                    <label for="PrecioNumber">Precio: </label>
                    <InputNumber id="PrecioNumber" @bind-Value="Producto.Precio" class="form-control" diasbled="disabled"></InputNumber>
                </div>

            </div>

            <div class="btn-group">
                <button class="btn btn-primary" @onclick="Nuevo" type="button">Nuevo</button>
                <button class="btn btn-success" type="submit">Guardar</button>
                <button class="btn btn-danger" @onclick="Borrar" type="button">Eliminar</button>

                <button type="button" class="btn btn-secondary" @onclick="Agregar100">Agregar100</button>
            </div>
        </EditForm>
    </div>
}


@code {
    Productos Producto = new Productos();
    public List<Unidades> ListaUnidades { get; set; }
    string unidadSeleccionada = "0";

    [Parameter]
    public int ProductoId { get; set; }

    protected string OkayDisabled { get; set; } = "disabled";
    public bool NivelUsuario;
    protected override void OnParametersSet()
    {
        if (ProductoId > 0)
        {
            Producto.ProductoId = ProductoId;
            Buscar();
        }
    }

    protected override void OnInitialized()
    {
        NivelUsuario = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Bajo");
        ListaUnidades = UnidadController.GetList(A => true);
    }

    

    private void Guardar()
    {
        Calcular();
        if (ProductosController.Guardar(Producto))
        {
            toastService.ShowSuccess("Producto Guardado");
            Nuevo();
        }
        else
            toastService.ShowError("HUno un error");

    }
    private void Buscar()
    {
        var ProductoBusqueda = ProductosController.Buscar(Producto.ProductoId);
        if (ProductoBusqueda == null)
            toastService.ShowError("Este Producto no existe");
        else
        {
            toastService.ShowSuccess("Este Producto fue encontrado");
            Producto = ProductoBusqueda;

        }
    }
    private void Borrar()
    {
        if (Producto.ProductoId == 0)
        {
            toastService.ShowError("El Producto no se pudo borrar porque aun no existe");
        }
        else
        {
            if (ProductosController.Eliminar(Producto.ProductoId))
                toastService.ShowSuccess("El Producto se borro correctamente");
            else
                toastService.ShowError("El Producto no se pudo borrar");
        }

    }

    private void Nuevo()
    {
        Producto = new Productos();
        unidadSeleccionada = "0";
    }

    private void Calcular()
    {
        decimal val = Producto.Ganancia / 100;
        Producto.Precio = (Producto.Costo * val) + Producto.Costo;
    }

    private void agregarUnidad()
    {
        try
        {
            Producto.Unidad = int.Parse(unidadSeleccionada);
        }
        catch (Exception)
        {

        }
    }


    private void Agregar100()
    {
        try
        {
            if (ClientesController.Insertar100())
            {
                toastService.ShowSuccess("Se agregaron 100");
            }
            else
            {
                toastService.ShowSuccess("NO Se agregaron 100");
            }
        }

        catch (Exception)
        {

            throw;
        }
    }
}
