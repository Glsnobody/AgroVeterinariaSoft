@page "/RClientes"
@page "/RClientes/{ClienteId:int}"
@inject IToastService toastService

@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>


    <NotAuthorized>
        <p class="h4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>



</AuthorizeView>


@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{



    <div class="container">

        <div>
            <h2 class="text-center">Registro de Clientes</h2>
            <div>
                <EditForm Model="Cliente" OnValidSubmit="Guardar">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label>Id</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="Cliente.ClienteId" class="form-control" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>
                            </div>
                        </div>

                    </div>

                    <div class="form-row">
                        <div class="form-group col-lg-6 col-sm-12 col-md-6">
                            <label>Nombres</label>
                            <InputText @bind-Value="Cliente.Nombres" class="form-control" />
                        </div>

                        <div class="form-group col-lg-6 col-sm-12 col-md-6">
                            <label>Fecha de Nacimiento</label>
                            <InputDate @bind-Value="Cliente.FechaNacimiento" class="form-control" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-lg-6 col-sm-12 col-md-6">
                            <label>Cedula</label>
                            <InputText @bind-Value="Cliente.Cedula" class="form-control" />
                        </div>

                        <div class="form-group col-lg-6 col-sm-12 col-md-6">
                            <label>Telefono</label>
                            <InputText @bind-Value="Cliente.Telefono" class="form-control" />
                        </div>

                    </div>

                    <div class="form-row">
                        <div class="form-group col-lg-6 col-sm-12 col-md-6">
                            <label>Direccion</label>
                            <InputText @bind-Value="Cliente.Direccion" class="form-control" />
                        </div>

                        <div class="form-group col-lg-6 col-sm-12 col-md-6">
                            <label>Balance</label>
                            <InputNumber @bind-Value="Cliente.Balance" class="form-control" ReadOnly="true" />
                        </div>
                    </div>

                    <ValidationSummary />
                    <div class="form-group">
                        <button type="button" class="btn btn-primary" @onclick="Limpiar">Limpiar</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                        <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
                    </div>


                </EditForm>
            </div>
        </div>
    </div>
}




@code {

    public Clientes Cliente { get; set; }
    [Parameter]
    public int ClienteId { get; set; }

    public bool Autorizado { get; set; }
    public bool NivelUsuario;

    protected override void OnInitialized()
    {
        Cliente = new Clientes();
        Autorizado = false;


    }

    protected override void OnParametersSet()
    {
        if (ClienteId > 0)
        {
            Cliente.ClienteId = ClienteId;
            Buscar();
        }
    }

    private void Guardar()
    {
        try
        {
            if (ClientesController.Guardar(Cliente))
            {
                Cliente = new Clientes();
                toastService.ShowSuccess("Guardado correctamente");
            }
            else
            {
                toastService.ShowError("No se pudo guardar");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void Buscar()
    {
        try
        {
            Clientes temp = ClientesController.Buscar(Cliente.ClienteId);

            if (temp != null)
            {
                Cliente = temp;
            }
            else
            {
                toastService.ShowError("No se pudo encontrar");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void Eliminar()
    {
        try
        {


            if (ClientesController.Existe(Cliente.ClienteId))
            {
                if (ClientesController.Eliminar(Cliente.ClienteId))
                {
                    toastService.ShowError("No se pudo eliminar");
                }
            }
            else
            {
                toastService.ShowInfo("No se pudo encontrar");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void Limpiar()
    {
        Cliente = new Clientes();
    }

    private void Agregar100()
    {
        try
        {
            if (ClientesController.Insertar100())
            {
                toastService.ShowSuccess("Se agregaron 100");
            }
            else
            {
                toastService.ShowSuccess("NO Se agregaron 100");
            }
        }

        catch (Exception)
        {

            throw;
        }
    }




}

