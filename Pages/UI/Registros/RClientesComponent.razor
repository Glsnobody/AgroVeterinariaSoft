@page "/RClientes"
@page "/RClientes/{ClienteId:int}"
@inject IToastService toastService

@inject AuthenticationStateProvider AuthenticationStateProvider




<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>
    </NotAuthorized>

</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
   

    <div class="container">
        <h3 class="display-3 text-center">Registro de Clientes</h3>


        <EditForm Model="Cliente" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label>Id</label>
                <div class="input-group">
                    <InputNumber @bind-Value="Cliente.ClienteId" class="form-control" />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>
                    </div>
                </div>

            </div>

            <div class="form-row">
                <div class="form-group col">
                    <label>Nombres</label>
                    <InputText @bind-Value="Cliente.Nombres" class="form-control" />
                </div>

                <div class="form-group col">
                    <label>Fecha de Nacimiento</label>
                    <InputDate @bind-Value="Cliente.FechaNacimiento" class="form-control" />
                </div>
            </div>
           
            <div class="form-row">
                <div class="form-group col">
                    <label>Cedula</label>
                    <InputText @bind-Value="Cliente.Cedula" class="form-control" />
                </div>

                <div class="form-group col">
                    <label>Telefono</label>
                    <InputText @bind-Value="Cliente.Telefono" class="form-control" />
                </div>

            </div>
            
            <div class="form-row">
                <div class="form-group col">
                    <label>Direccion</label>
                    <InputText @bind-Value="Cliente.Direccion" class="form-control" />
                </div>

                <div class="form-group col">
                    <label>Balance</label>
                    <InputNumber @bind-Value="Cliente.Balance" class="form-control" ReadOnly="true" />
                </div>
            </div>

            

            <ValidationSummary />
            <button type="button" class="btn btn-primary" @onclick="Limpiar">Limpiar</button>
            <button type="submit" class="btn btn-success">Guardar</button>
            <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>

        </EditForm>


    </div>
}




@code {

    public Clientes Cliente { get; set; }
    [Parameter]
    public int ClienteId { get; set; }

    public bool Autorizado { get; set; }

    protected override void OnInitialized()
    {
        Cliente = new Clientes();
        Autorizado = false;


    }

    protected override void OnParametersSet()
    {
        if (ClienteId > 0)
        {
            Cliente.ClienteId = ClienteId;
            Buscar();
        }
    }

    private void Guardar()
    {
        try
        {
            if (ClientesController.Guardar(Cliente))
            {
                Cliente = new Clientes();
                toastService.ShowSuccess("Guardado correctamente");
            }
            else
            {
                toastService.ShowError("No se pudo guardar");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void Buscar()
    {
        try
        {
            Clientes temp = ClientesController.Buscar(Cliente.ClienteId);

            if (temp != null)
            {
                Cliente = temp;
            }
            else
            {
                toastService.ShowError("No se pudo encontrar");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void Eliminar()
    {
        try
        {


            if (ClientesController.Existe(Cliente.ClienteId))
            {
                if (ClientesController.Eliminar(Cliente.ClienteId))
                {
                    toastService.ShowError("No se pudo eliminar");
                }
            }
            else
            {
                toastService.ShowInfo("No se pudo encontrar");
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void Limpiar()
    {
        Cliente = new Clientes();
    }
}
