@page "/RSuplidores"
@page "/RSuplidores/{SuplidorId:int}"
@inject IToastService toastService



@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>

    <Authorized>
        @if (NivelUsuario)
        {
            <p class="display-3 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
        }
    </Authorized>

</AuthorizeView>


@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
 && !NivelUsuario)
{

    <div class="container">

        <h2 class=" text-center">Registro de Suplidores</h2>

        <EditForm Model="Suplidor" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="SuplidorIdNumber">SuplidorId:</label>
                <div class="input-group">
                    <InputNumber id="SuplidorIdNumber" @bind-Value="Suplidor.SuplidorId" class="form-control" />
                    <button class="btn btn-primary" type="button" @onclick="Buscar">Buscar </button>
                </div>
            </div>
            <div class="form-group">
                <label for="FechaCreacionDate">Fecha: </label>
                <InputDate id="FechaCreacionDate" @bind-Value="Suplidor.FechaCreacion" class="form-control"> Fecha: </InputDate>
            </div>
            <div class="form-group">
                <label for="NombreText">Nombre: </label>
                <InputText id="NombreText" @bind-Value="Suplidor.Nombre" class="form-control"></InputText>
            </div>
            <div class="form-group">
                <label for="DireccionText">Direccion: </label>
                <InputText id="DireccionText" @bind-Value="Suplidor.Direccion" class="form-control"></InputText>
            </div>
            <div class="form-group">
                <label for="DireccionText">Telefono: </label>
                <InputText id="TelefonoText" @bind-Value="Suplidor.Telefono" class="form-control"></InputText>
            </div>
            <div class="form-group">
                <label for="RNCText">RNC: </label>
                <InputText id="RNCText" @bind-Value="Suplidor.RNC" class="form-control"></InputText>
            </div>

            <div class="btn-group">
                <button class="btn btn-primary" @onclick="Nuevo" type="button">Nuevo</button>
                <button class="btn btn-success" type="submit">Guardar</button>
                <button class="btn btn-danger" @onclick="Eliminar" type="button">Eliminar</button>
            </div>



        </EditForm>
    </div>
}



@code {
    Suplidores Suplidor = new Suplidores();
    [Parameter]
    public int SuplidorId { get; set; }
     public bool NivelUsuario;
    protected override void OnParametersSet()
    {
        if (SuplidorId > 0)
        {
            Suplidor.SuplidorId = SuplidorId;
            Buscar();
        }
    }

    protected override void OnInitialized()
        {
            NivelUsuario = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Bajo");
        }

    private void Guardar()
    {
        if (SuplidoresController.Guardar(Suplidor))
        {
            Suplidor = new Suplidores();
            toastService.ShowSuccess("Suplidor Guardado");
        }
        else
            toastService.ShowError("HUno un error");

    }
    private void Buscar()
    {
        var SuplidorBusqueda = SuplidoresController.Buscar(Suplidor.SuplidorId);
        if (SuplidorBusqueda == null)
            toastService.ShowError("Este Suplidor no existe");
        else
        {
            toastService.ShowSuccess("Este Suplidor fue encontrado");
            Suplidor = SuplidorBusqueda;

        }
    }
    private void Eliminar()
    {
        if (Suplidor.SuplidorId == 0)
        {
            toastService.ShowError("El Suplidor no se pudo borrar porque aun no existe");
        }
        else
        {
            if (SuplidoresController.Eliminar(Suplidor.SuplidorId))
            {
                toastService.ShowSuccess("El Suplidor se borro correctamente");
            }

            else
                toastService.ShowError("El Suplidor no se pudo borrar");
        }

    }
    private void Nuevo()
    {
        Suplidor = new Suplidores();
    }
}
