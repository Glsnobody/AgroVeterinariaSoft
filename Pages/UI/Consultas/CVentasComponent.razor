@page "/CVentas"

@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>

    <Authorized>
        @if (!NivelUsuario)
        {
            <p class="display-3 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
        }
    </Authorized>

</AuthorizeView>


@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
&& NivelUsuario)
{
    <div class="container">

        <h3 class="display-3 text-center">Consulta de Ventas</h3>

        <div>
            @if (ListaVentas == null)
            {
                <div class="text-center">
                    <div class="spinner-border">
                        <span class="sr-only">Loading....</span>
                    </div>
                </div>}
            else
            {
                <div class="form-row">
                    <div class="col form-group">
                        <div>
                            <label>Desde</label>
                            <input type="checkbox" @bind-value="FiltrarPorFecha" /> Filtrar Fecha
                        </div>

                        <input type="date" @bind-value="DesdeFecha" class="form-control" />
                    </div>

                    <div class="col form-group">
                        <label>Hasta</label>
                        <input type="date" @bind-value="HastaFecha" class="form-control" />
                    </div>

                    <div class="col form-group">
                        <label>Criterio</label>
                        <input type="text" @bind-value="Criterio" class="form-control" />
                    </div>
                    <EditForm Model="Venta">
                        <div class="col form-group">
                            <label>Filtrar por</label>
                            <div class="input-group">
                                <InputSelect @bind-Value="Filtro" class="form-control">
                                    <option selected value="0">Todo</option>
                                    <option value="1">VentaId</option>
                                    <option value="2">Cliente</option>
                                    <option value="3">Observacion</option>
                                    <option value="4">Total</option>
                                    <option value="5">Cant. Productos</option>
                                </InputSelect>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary" @onclick="filtrar">Buscar</button>
                                </div>
                            </div>

                        </div>
                    </EditForm>
                </div>
                if (ListaVentas.Count <= 0)
                {
                    <h3 class="display-3 text-center">No hay datos que mostrar</h3>
                }
                else
                {
                    <div class="table-responsive text-nowrap">
                        <table class="table table-striped">
                            <thead class="thead-dark">
                                <tr>
                                    <th scope="col">Id</th>
                                    <th scope="col">Cliente</th>
                                    <th scope="col">Fecha </th>
                                    <th scope="col">Total</th>
                                    <th scope="col">Observacion</th>
                                    <th scope="col">Cant. Productos</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var entity in ListaVentas)
                                {
                                    <tr>
                                        <td scope="row">@entity.ClienteId</td>
                                        <td>@ClientesController.GetNombre(entity.ClienteId)</td>
                                        <td>@entity.Fecha.ToShortDateString()</td>
                                        <td>@entity.Total</td>
                                        <td>@entity.Observacion</td>
                                        <td>@entity.Productos.Count</td>
                                        <td><a class="btn btn-sm btn-outline-primary" href="/RVenta/@entity.VentaId">Ver</a></td>
                                    </tr>
                                }

                            </tbody>

                        </table>
                    </div>

                    <PaginacionComponent Evento="(()=> CargarLista())" Paginacion="@Paginacion" />
                }
            }

        </div>

    </div>
}


@code {

    public List<Ventas> ListaVentas { get; set; }

    public DateTime DesdeFecha { get; set; }
    public DateTime HastaFecha { get; set; }
    public string Criterio { get; set; }
    public string Filtro { get; set; }
    public bool FiltrarPorFecha { get; set; }

    public Expression<Func<Ventas, bool>> expression { get; set; }
    public Ventas Venta { get; set; }
    public Paginacion Paginacion { get; set; }
    public bool NivelUsuario;
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => { Inicialzar(); });
    }

    private void Inicialzar()
    {
        NivelUsuario = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Alto");
        DesdeFecha = DateTime.Now;
        HastaFecha = DateTime.Now;
        Venta = new Ventas();
        FiltrarPorFecha = false;
        Filtro = "0";
        Paginacion = new Paginacion();
        filtrar();
    }

    private void CargarLista()
    {
        try
        {
            ListaVentas = VentasController.Paginacion(Paginacion, expression);
        }
        catch (Exception)
        {

            throw;
        }

    }

    private void filtrar()
    {
        try
        {
            if (!FiltrarPorFecha)
            {
                switch (Filtro)
                {
                    case "0":
                        expression = A => true;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "1":
                        expression = A => A.VentaId == int.Parse(Criterio);
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    //case "2":
                    //    expression = A => ClientesController.ExisteNombre(A.ClienteId, Criterio);
                    //    Paginacion.PaginaActual = 1;
                    //    CargarLista();
                    //    break;


                    case "3":
                        expression = A=> A.Observacion.Contains(Criterio);
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;



                    case "4":
                        expression = A => A.Total == decimal.Parse(Criterio);
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "5":
                        expression = A => A.Productos.Count == int.Parse(Criterio);
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    default:
                        expression = A => true;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                }
            }
            else
            {
                switch (Filtro)
                {
                    case "0":
                        expression = A => true
                        && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "1":
                        expression = A => A.VentaId == int.Parse(Criterio)
                        && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    //case "2":
                    //    expression = A => ClientesController.ExisteNombre(A.ClienteId, Criterio)
                    //&& A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                    //    Paginacion.PaginaActual = 1;
                    //    CargarLista();
                    //    break;


                    case "3":
                        expression = A=> A.Observacion.Contains(Criterio)
                        && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;


                    case "4":
                        expression = A => A.Total == decimal.Parse(Criterio)
                        && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "5":
                        expression = A => A.Productos.Count == int.Parse(Criterio)
                        && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    default:
                        expression = A => true
                        && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                }
            }

        }
        catch (Exception)
        {


        }
    }

}
