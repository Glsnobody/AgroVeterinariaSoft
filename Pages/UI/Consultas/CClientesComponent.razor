@page "/CClientes"

@using System.Collections.Generic
@using System.Linq
@using System.Linq.Expressions

@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>

    <Authorized>
        @if (NivelUsuario)
        {
            <p class="display-3 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
        }
    </Authorized>

</AuthorizeView>


@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
&& !NivelUsuario)
{
    <div class="container">

        <h3 class="display-3 text-center">Consulta de Clientes</h3>

        <div>
            @if (ListaClientes == null)
            {
                <div class="text-center">
                    <div class="spinner-border">
                        <span class="sr-only">Loading....</span>
                    </div>
                </div>}
            else
            {
                if (ListaClientes.Count <= 0)
                {
                    <h3 class="display-3 text-center">No hay datos que mostrar</h3>
                }
                else
                {

                    <div class="form-row">
                        <div class="col form-group">
                            <div>
                                <label>Desde</label>
                                <input type="checkbox" @bind-value="FiltrarPorFecha" /> Filtrar Fecha
                            </div>

                            <input type="date" @bind-value="DesdeFecha" class="form-control" />
                        </div>

                        <div class="col form-group">
                            <label>Hasta</label>
                            <input type="date" @bind-value="HastaFecha" class="form-control" />
                        </div>

                        <div class="col form-group">
                            <label>Criterio</label>
                            <input type="text" @bind-value="Criterio" class="form-control" />
                        </div>
                        <EditForm Model="Cliente">
                            <div class="col form-group">
                                <label>Filtrar por</label>
                                <div class="input-group">
                                    <InputSelect @bind-Value="Filtro" class="form-control">
                                        <option selected value="0">Todo</option>
                                        <option value="1">Id</option>
                                        <option value="2">Nombres</option>
                                        <option value="3">Cedula</option>
                                        <option value="4">Balance</option>
                                        <option value="5">Fecha de Nacimiento</option>
                                    </InputSelect>
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary" @onclick="filtrar">Buscar</button>
                                    </div>
                                </div>

                            </div>
                        </EditForm>
                    </div>
                <div class="table-responsive text-nowrap">
                    <table class="table table-striped">
                        <thead class="thead-dark">
                            <tr>
                                <th scope="col">Id</th>
                                <th scope="col">Nombres</th>
                                <th scope="col">Fecha Nacimiento</th>
                                <th scope="col">Telefono</th>
                                <th scope="col">Cedula</th>
                                <th scope="col">Balance</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var entity in ListaClientesTemp)
                            {
                                <tr>
                                    <td scope="row">@entity.ClienteId</td>
                                    <td>@entity.Nombres</td>
                                    <td>@entity.FechaNacimiento.ToShortDateString()</td>
                                    <td>@entity.Telefono</td>
                                    <td>@entity.Cedula</td>
                                    <td>@entity.Balance</td>
                                    <td><a class="btn btn-sm btn-outline-primary" href="/RClientes/@entity.ClienteId">Ver</a></td>
                                </tr>
                            }

                        </tbody>

                    </table>
                </div>

                    <PaginacionComponent Evento="(()=> CargarLista())" Paginacion="@Paginacion" />

                }
            }

        </div>

    </div>
}





@code {

    public List<Clientes> ListaClientes { get; set; }
    public List<Clientes> ListaClientesTemp { get; set; }

    public DateTime DesdeFecha { get; set; }
    public DateTime HastaFecha { get; set; }
    public string Criterio { get; set; }
    public string Filtro { get; set; }
    public bool FiltrarPorFecha { get; set; }

    public Clientes Cliente { get; set; }

    public bool NivelUsuario;
    public Paginacion Paginacion { get; set; }

    public Expression<Func<Clientes, bool>> expression { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => { Inicialzar(); CargarLista(); });
    }

    private void Inicialzar()
    {
        DesdeFecha = DateTime.Now;
        HastaFecha = DateTime.Now;
        Cliente = new Clientes();

        ListaClientesTemp = new List<Clientes>();
        FiltrarPorFecha = false;
        Filtro = "0";
        Paginacion = new Paginacion();
        Paginacion.Radio = 3;
        NivelUsuario = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Bajo");
        expression = A => true;
        CargarLista();
    }

    private void CargarLista()
    {
        try
        {
            ListaClientes = ClientesController.Paginacion(Paginacion, expression);
            ListaClientesTemp = ListaClientes;
            //CargarListaPaginas();
            //ListaClientes = ClientesController.Paginacion(Paginacion);
        }
        catch (Exception)
        {

            throw;
        }

    }

    //private void SiguientePagina()
    //{
    //    if (Paginacion.PaginaActual < Paginacion.TotalPaginas)
    //    {
    //        Paginacion.PaginaActual++;
    //        CargarLista();

    //    }
    //    else
    //    {

    //        return;
    //    }
    //}

    //private void AnteriorPagina()
    //{
    //    if (Paginacion.PaginaActual > 0)
    //    {
    //        Paginacion.PaginaActual--;
    //        CargarLista();

    //    }
    //    else
    //    {
    //        return;

    //    }
    //}

    //private void CargarListaPaginas()
    //{

    //    Paginas = new List<int>();

    //    for(int i=1;i<Paginacion.TotalPaginas;i++)
    //    {

    //        if(i >= Paginacion.PaginaActual -Paginacion.Radio && i<= Paginacion.PaginaActual + Paginacion.Radio)
    //        {
    //            if(i > 0 && i<= Paginacion.TotalPaginas)
    //            {
    //                Paginas.Add(i);
    //            }
    //        }
    //    }

    //}

    //private void IrAPagina(int i)
    //{
    //    try
    //    {
    //        Paginacion.PaginaActual = i;
    //        CargarLista();
    //    }
    //    catch (Exception)
    //    {

    //        throw;
    //    }
    //}

    private void filtrar()
    {
        try
        {
            switch (Filtro)
            {
                case "0":
                    expression = A => true;
                    Paginacion.PaginaActual = 1;
                    CargarLista();
                    break;

                case "1":
                    expression = A => A.ClienteId == int.Parse(Criterio);
                    Paginacion.PaginaActual = 1;
                    CargarLista();
                    break;

                case "2":
                    expression = A => A.Nombres.Contains(Criterio);
                    Paginacion.PaginaActual = 1;
                    CargarLista();

                    break;

                case "3":
                    expression = A => A.Cedula.Contains(Criterio);
                    Paginacion.PaginaActual = 1;
                    CargarLista();
                    break;


                case "4":
                    expression = A => A.Balance == decimal.Parse(Criterio);
                    Paginacion.PaginaActual = 1;
                    CargarLista();
                    break;

                case "5":

                    expression = A => A.FechaNacimiento.Date >= DesdeFecha.Date && A.FechaNacimiento.Date <= HastaFecha.Date;
                    Paginacion.PaginaActual = 1;
                    CargarLista();
                    break;

                default:
                    expression = A => true;
                    Paginacion.PaginaActual = 1;
                    CargarLista();
                    break;

            }
            if (FiltrarPorFecha == true && Filtro.Equals("5") == false)
                ListaClientesTemp = ListaClientes.Where(A => A.FechaCreacion.Date >= DesdeFecha.Date && A.FechaCreacion.Date <= HastaFecha.Date).ToList();

        }
        catch (Exception)
        {


        }
    }

}
