@page "/CUsuarios"

@inject AuthenticationStateProvider AuthenticationStateProvider
<div class="container">

    <h3 class="display-3 text-center">Consulta de Usuarios</h3>

    <div>
        @if (Lista == null)
        {
            <div class="text-center">
                <div class="spinner-border">
                    <span class="sr-only">Loading....</span>
                </div>
            </div>
        }
        else
        {

            <div class="form-row">
                <div class="col form-group">
                    <div>
                        <label>Desde</label>
                        <input type="checkbox" @bind-value="FiltrarPorFecha" /> Filtrar Fecha
                    </div>

                    <input type="date" @bind-value="DesdeFecha" class="form-control" />
                </div>

                <div class="col form-group">
                    <label>Hasta</label>
                    <input type="date" @bind-value="HastaFecha" class="form-control" />
                </div>

                <div class="col form-group">
                    <label>Criterio</label>
                    <input type="text" @bind-value="Criterio" class="form-control" />
                </div>
                <EditForm Model="Usuario">
                    <div class="col form-group">
                        <label>Filtrar por</label>
                        <div class="input-group">
                            <InputSelect @bind-Value="Filtro" class="form-control">
                                <option selected value="0">Todo</option>
                                <option value="1">Id</option>
                                <option value="2">Nombre</option>
                                <option value="3">Usuario</option>
                                <option value="3">Correo</option>
                                <option value="4">Nivel de Acceso</option>
                            </InputSelect>
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary" @onclick="filtrar">Buscar</button>
                            </div>
                        </div>

                    </div>
                </EditForm>


            </div>
            @if (Lista.Count <= 0)
            {
                <p class="display-3 text-center"> >No hay dato que mostrar</p>
            }
            else
            {
                <div class="table-responsive text-nowrap">
                    <table class="table table-striped">
                        <thead class="thead-dark">
                            <tr>
                                <th scope="col">Id</th>
                                <th scope="col">Nombres</th>
                                <th scope="col">Usuario</th>
                                <th scope="col">Correo</th>
                                <th scope="col">Nivel de Acceso</th>
                                <th scope="col">Fecha</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var entity in Lista)
                            {
                                <tr>
                                    <td scope="row">@entity.UsuarioId</td>
                                    <td>@entity.Nombres</td>
                                    <td>@entity.Usuario</td>
                                    <td>@entity.Correo</td>
                                    <td>@entity.NivelAcceso</td>
                                    <td>@entity.Fecha.ToShortDateString()</td>
                                    <td><a class="btn btn-sm btn-outline-primary" href="/RUsuarios/@entity.UsuarioId">Ver</a></td>
                                </tr>
                            }

                        </tbody>

                    </table>

                </div>
                <PaginacionComponent Evento="(()=> filtrar())" Paginacion="@Paginacion" />
            }

        }
        

    </div>

</div>


@code {

    public List<Usuarios> Lista { get; set; }

    public DateTime DesdeFecha { get; set; }
    public DateTime HastaFecha { get; set; }
    public string Criterio { get; set; }
    public string Filtro { get; set; }
    public bool FiltrarPorFecha { get; set; }

    public Usuarios Usuario { get; set; }
    public Expression<Func<Usuarios, bool>> expression { get; set; }
    public Paginacion Paginacion { get; set; }
    public bool NivelUsuario;
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => { Inicialzar(); });
    }

    private void Inicialzar()
    {
        NivelUsuario = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Alto");
        DesdeFecha = DateTime.Now;
        HastaFecha = DateTime.Now;
        Usuario = new Usuarios();
        FiltrarPorFecha = false;
        Filtro = "0";
        Paginacion = new Paginacion();
         filtrar();
    }

    private void CargarLista()
    {
        try
        {
            Lista = UsuariosController.Paginacion(Paginacion, expression);

        }
        catch (Exception)
        {

            throw;
        }

    }


    private void filtrar()
    {
        try
        {

            if (!FiltrarPorFecha)
            {
                switch (Filtro)
                {
                    case "0":
                        expression = A => true;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "1":
                        expression = A => A.UsuarioId == int.Parse(Criterio);
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "2":
                        expression = A => A.Nombres.Contains(Criterio);
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "3":
                        expression = A => A.Usuario.Contains(Criterio);
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "4":
                        expression = A => A.Correo.Contains(Criterio);
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "5":
                        expression = A => A.NivelAcceso.Contains(Criterio);
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;


                    default:
                        expression = A => true;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                }
            }
            else
            {
                switch (Filtro)
                {
                    case "0":
                        expression = A => true
                        && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "1":
                        expression = A => A.UsuarioId == int.Parse(Criterio)
                         && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "2":
                        expression = A => A.Nombres.Contains(Criterio)
                         && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "3":
                        expression = A => A.Usuario.Contains(Criterio)
                        && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "4":
                        expression = A => A.Correo.Contains(Criterio)
                         && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "5":
                        expression = A => A.NivelAcceso.Contains(Criterio)
                         && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;


                    default:
                        expression = A => true
                        && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                }
            }


        }
        catch (Exception)
        {


        }
    }

}
