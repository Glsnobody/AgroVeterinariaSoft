@page "/CUnidades"

@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>


    <NotAuthorized>
        <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>

    <Authorized>
        @if (!NivelUsuario)
        {
            <p class="display-3 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
        }
    </Authorized>

</AuthorizeView>


@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
&& !NivelUsuario)
{
    <div class="container">

        <h3 class="display-3 text-center">Consulta de Unidades</h3>

        <div>
            @if (Lista == null)
            {
                <div class="text-center">
                    <div class="spinner-border">
                        <span class="sr-only">Loading....</span>
                    </div>
                </div>}
            else
            {
                <div class="form-row">

                    <div class="col form-group">
                        <label>Criterio</label>
                        <input type="text" @bind-value="Criterio" class="form-control" />
                    </div>
                    <EditForm Model="Modelo" class="col">
                        <div class="form-group">
                            <label>Filtrar por</label>
                            <div class="input-group">
                                <InputSelect @bind-Value="Filtro" class="form-control">
                                    <option selected value="0">Todo</option>
                                    <option value="1">Id</option>
                                    <option value="2">Descipcion</option>
                                </InputSelect>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary" @onclick="filtrar">Buscar</button>
                                </div>
                            </div>

                        </div>
                    </EditForm>
                </div>
                if (Lista.Count <= 0)
                {
                    <h3 class="display-3 text-center">No hay datos que mostrar</h3>
                }
                else
                {
                    <div class="table-responsive text-nowrap">
                        <table class="table table-striped">
                            <thead class="thead-dark">
                                <tr>
                                    <th scope="col">Id</th>
                                    <th scope="col">Descripcion</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var entity in Lista)
                                {
                                    <tr>
                                        <td scope="row">@entity.UnidadId</td>
                                        <td>@entity.Descripcion</td>
                                        <td><a class="btn btn-sm btn-outline-primary" href="/RUnidades/@entity.UnidadId">Ver</a></td>
                                    </tr>
                                }

                            </tbody>

                        </table>
                    </div>

                    <PaginacionComponent Evento="(()=> CargarLista())" Paginacion="@Paginacion" />
                }

            }

        </div>

    </div>
}





@code {

    public List<Unidades> Lista { get; set; }

    public string Criterio { get; set; }
    public string Filtro { get; set; }

    public Unidades Modelo { get; set; }

    public bool NivelUsuario;
    public Paginacion Paginacion { get; set; }

    public Expression<Func<Unidades, bool>> expression { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => { Inicialzar(); CargarLista(); });
    }

    private void Inicialzar()
    {
        Modelo = new Unidades();
        Filtro = "0";
        Paginacion = new Paginacion();
        Paginacion.Radio = 3;
        NivelUsuario = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Bajo");
        expression = A => true;
        CargarLista();
    }

    private void CargarLista()
    {
        try
        {
            Lista = UnidadController.Paginacion(Paginacion, expression);

        }
        catch (Exception)
        {

            throw;
        }

    }


    private void filtrar()
    {
        try
        {

            switch (Filtro)
            {
                case "0":
                    expression = A => true;
                    Paginacion.PaginaActual = 1;
                    CargarLista();
                    break;

                case "1":
                    expression = A => A.UnidadId == int.Parse(Criterio);
                    Paginacion.PaginaActual = 1;
                    CargarLista();
                    break;

                case "2":
                    expression = A => A.Descripcion.Contains(Criterio);
                    Paginacion.PaginaActual = 1;
                    CargarLista();

                    break;


                default:
                    expression = A => true;
                    Paginacion.PaginaActual = 1;
                    CargarLista();
                    break;

            }

        }
        catch (Exception)
        {


        }
    }

}
