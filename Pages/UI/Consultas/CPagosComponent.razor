@page "/CPagos"

@inject AuthenticationStateProvider AuthenticationStateProvider


    <AuthorizeView>


        <NotAuthorized>
            <p class="display-4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

        </NotAuthorized>

        <Authorized>
            @if (NivelUsuario)
            {
                <p class="display-4 text-center">Usted no tiene el nivel necesario para acceder a esta pagina</p>
            }
        </Authorized>


    </AuthorizeView>


@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated
    && !NivelUsuario)
{
    <div class="container">

        <h2 class=" text-center">Consulta de Pagos</h2>

        <div>
            @if (Lista == null)
            {
                <div class="text-center">
                    <div class="spinner-border">
                        <span class="sr-only">Loading....</span>
                    </div>
                </div>}
            else
            {
                <div class="form-row">
                    <div class="col form-group">
                        <div>
                            <label>Desde</label>
                            <input type="checkbox" @bind-value="FiltrarPorFecha" /> Filtrar Fecha
                        </div>

                        <input type="date" @bind-value="DesdeFecha" class="form-control" />
                    </div>

                    <div class="col form-group">
                        <label>Hasta</label>
                        <input type="date" @bind-value="HastaFecha" class="form-control" />
                    </div>

                    <div class="col form-group">
                        <label>Criterio</label>
                        <input type="text" @bind-value="Criterio" class="form-control" />
                    </div>
                    <EditForm Model="Pago">
                        <div class="col form-group">
                            <label>Filtrar por</label>
                            <div class="input-group">
                                <InputSelect @bind-Value="Filtro" class="form-control">
                                    <option selected value="0">Todo</option>
                                    <option value="1">Id</option>
                                    <option value="2">Valor</option>
                                    <option value="3">Cant.Compras Pagadas</option>
                                </InputSelect>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary" @onclick="filtrar">Buscar</button>
                                </div>
                            </div>

                        </div>
                    </EditForm>
                </div>

                if (Lista.Count <= 0)
                {
                    <h2 class=" text-center">No hay datos que mostrar</h2>
                }
                else
                {
                    <div class="table-responsive text-nowrap">
                        <table class="table table-striped">
                            <thead class="thead-dark">
                                <tr>
                                    <th scope="col">Id</th>
                                    <th scope="col">Fecha</th>
                                    <th scope="col">Valor </th>
                                    <th scope="col">Cant.Compras Pagadas </th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var entity in Lista)
                                {
                                    <tr>
                                        <td scope="row">@entity.PagoId</td>
                                        <td>@entity.Fecha.ToShortDateString()</td>
                                        <td>@entity.Valor</td>
                                        <td>@entity.Detalle.Count</td>
                                        <td><a class="btn btn-sm btn-outline-primary" href="/RPagos/@entity.PagoId">Ver</a></td>
                                    </tr>
                                }


                            </tbody>

                        </table>
                    </div>
                    <PaginacionComponent Evento="(()=> CargarLista())" Paginacion="@Paginacion" />
                }


            }

        </div>

    </div>
}




@code {

    public List<Pagos> Lista { get; set; }

    public DateTime DesdeFecha { get; set; }
    public DateTime HastaFecha { get; set; }
    public string Criterio { get; set; }
    public string Filtro { get; set; }
    public bool FiltrarPorFecha { get; set; }
    public Expression<Func<Pagos, bool>> expression { get; set; }

    public bool NivelUsuario;
    public Pagos Pago { get; set; }

    public Paginacion Paginacion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => { Inicialzar(); });
    }

    private void Inicialzar()
    {
        NivelUsuario = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Bajo");
        DesdeFecha = DateTime.Now;
        HastaFecha = DateTime.Now;
        Pago = new Pagos();
        FiltrarPorFecha = false;
        Filtro = "0";
        Paginacion = new Paginacion();
        filtrar();

    }

    private void CargarLista()
    {
        try
        {
            Lista = PagosController.Paginacion(Paginacion, expression);
        }
        catch (Exception)
        {

            throw;
        }

    }

   

    private void filtrar()
    {
        try
        {
            if (!FiltrarPorFecha)
            {
                switch (Filtro)
                {
                    case "0":
                        expression = A => true;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "1":
                        expression = A => A.PagoId == int.Parse(Criterio);
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "2":                       
                        expression = A => A.Valor == decimal.Parse(Criterio);
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                        case "3":                       
                        expression = A => A.Detalle.Count == int.Parse(Criterio);
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    default:
                        expression = A => true;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                }
            }
            else
            {
                switch (Filtro)
                {
                    case "0":
                        expression = A => true && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "1":
                        expression = A => A.PagoId == int.Parse(Criterio)
                        && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    case "2":                       
                        expression = A => A.Valor == decimal.Parse(Criterio)
                        && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                         case "3":                       
                        expression = A => A.Detalle.Count == int.Parse(Criterio)
                        && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                    default:
                        expression = A => true
                        && A.Fecha.Date >= DesdeFecha.Date && A.Fecha.Date <= HastaFecha.Date;
                        Paginacion.PaginaActual = 1;
                        CargarLista();
                        break;

                }
            }




        }
        catch (Exception)
        {

        }
    }

}
